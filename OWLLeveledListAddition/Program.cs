using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using System.Threading.Tasks;
using Noggog;
using System.Text.RegularExpressions;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Order;
using System.Xml.Linq;
using Mutagen.Bethesda.Plugins.Cache;
using static Mutagen.Bethesda.Skyrim.Furniture;

namespace OWLLeveledListAddition
{


	public class Program
    {
        public static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynOWLLeveledListsAdditions.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {

            // Get OWL main
            var OWLesp = "Open World Loot.esp";
            var OWL = ModKey.FromFileName(OWLesp); 
            //var OWL = (Mods.Count > 0) ? state.LoadOrder[Mods.First()].Mod : null;

            if (OWL.IsNull)
            {
                System.Console.WriteLine("'Open World Loot.esp' not found");
                return;
            }

            System.Console.WriteLine("'Open World Loot.esp' found");


            HashSet<IFormLinkGetter<IKeywordGetter>> weaponMaterialKeywords = new()
            {
                Skyrim.Keyword.WeapMaterialIron,
                Skyrim.Keyword.WeapMaterialSteel,
                Skyrim.Keyword.WeapMaterialOrcish,
                Skyrim.Keyword.WeapMaterialDwarven,
                Skyrim.Keyword.WeapMaterialElven,
                Skyrim.Keyword.WeapMaterialGlass,
                Skyrim.Keyword.WeapMaterialEbony,
                Skyrim.Keyword.WeapMaterialDaedric,
                Skyrim.Keyword.WeapMaterialImperial,
                Skyrim.Keyword.WeapMaterialSilver,
                //Dragonborn.Keyword.WeapMaterialForsworn,
                Skyrim.Keyword.WeapMaterialFalmer,
                Skyrim.Keyword.WeapMaterialDraugrHoned,
                Skyrim.Keyword.WeapMaterialDraugr,
                Skyrim.Keyword.WeapMaterialSilver,
                Dawnguard.Keyword.DLC1WeapMaterialDragonbone,
                Dragonborn.Keyword.DLC2WeaponMaterialNordic,
                Dragonborn.Keyword.DLC2WeaponMaterialStalhrim
            };

            HashSet<IFormLinkGetter<IKeywordGetter>> weaponTypeKeywords = new()
            {
                Skyrim.Keyword.WeapTypeDagger,
                Skyrim.Keyword.WeapTypeSword,
                Skyrim.Keyword.WeapTypeMace,
                Skyrim.Keyword.WeapTypeWarAxe,
                Skyrim.Keyword.WeapTypeBow,
                Skyrim.Keyword.WeapTypeWarhammer,
                Skyrim.Keyword.WeapTypeBattleaxe,
                Skyrim.Keyword.WeapTypeGreatsword,
                Skyrim.Keyword.VendorItemArrow
            };

            HashSet<IFormLinkGetter<IKeywordGetter>> armorMaterialKeywords = new()
            {
                Skyrim.Keyword.ArmorMaterialIron,
                Skyrim.Keyword.ArmorMaterialSteel,
                Skyrim.Keyword.ArmorMaterialSteelPlate,
                Skyrim.Keyword.ArmorMaterialOrcish,
                Skyrim.Keyword.ArmorMaterialDwarven,
                Skyrim.Keyword.ArmorMaterialElven,
                Skyrim.Keyword.ArmorMaterialElvenGilded,
                Skyrim.Keyword.ArmorMaterialGlass,
                Skyrim.Keyword.ArmorMaterialEbony,
                Skyrim.Keyword.WeapMaterialFalmer,
                Skyrim.Keyword.ArmorMaterialHide,
                Skyrim.Keyword.ArmorMaterialLeather,
                Skyrim.Keyword.ArmorMaterialScaled,
                Skyrim.Keyword.ArmorMaterialDaedric,
                Skyrim.Keyword.ArmorMaterialDragonplate,
                Skyrim.Keyword.ArmorMaterialDragonscale,
                Skyrim.Keyword.ArmorMaterialImperialHeavy,
                Skyrim.Keyword.ArmorMaterialImperialStudded,
                Skyrim.Keyword.ArmorMaterialImperialLight,
                Skyrim.Keyword.ArmorMaterialIronBanded,
                Skyrim.Keyword.ArmorMaterialStormcloak,
                Dragonborn.Keyword.DLC2ArmorMaterialNordicHeavy,
                Dragonborn.Keyword.DLC2ArmorMaterialNordicLight,
                Dragonborn.Keyword.DLC2ArmorMaterialStalhrimHeavy,
                Dragonborn.Keyword.DLC2ArmorMaterialStalhrimLight,
                Dragonborn.Keyword.DLC2ArmorMaterialChitinHeavy,
                Dragonborn.Keyword.DLC2ArmorMaterialChitinLight,
                Dragonborn.Keyword.DLC2ArmorMaterialBonemoldHeavy,
                Dragonborn.Keyword.DLC2ArmorMaterialBonemoldLight
            };

            HashSet<IFormLinkGetter<IKeywordGetter>> armorTypeKeywords = new()
            {
                Skyrim.Keyword.ArmorBoots,
                Skyrim.Keyword.ArmorCuirass,
                Skyrim.Keyword.ArmorShield,
                Skyrim.Keyword.ArmorGauntlets,
                Skyrim.Keyword.WeapTypeBow
            };

            // Counters
            int count1 = 0;
            int count2 = 0;
            int count3 = 0;

            System.Console.WriteLine("Starting Patching!");

            // Create a mod-independent list of entries to add to the OWL lists
            Dictionary<string, HashSet<LeveledItemEntry>> leveledItemsToAdd = new();

            // Create a mod-dependent list of entries to add to the OWL lists
            Dictionary<Tuple<ModKey, string>, HashSet<LeveledItemEntry>> leveledItemsToAddPerMod = new();

            // Iterate on all weapons
            foreach (var weaponGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
            {
                // Ignore no keywords
                if (weaponGetter.Keywords is null) continue;

                // Ignore enchanted
                if (!weaponGetter.ObjectEffect.IsNull) continue;

                // Ignore daedric artifacts
                if (weaponGetter.HasKeyword(Skyrim.Keyword.VendorItemDaedricArtifact)) continue;


                string material = "";
                string type = "";

                // Search all keywords
                foreach (var keyword in weaponGetter.Keywords)
                {
                    if (weaponMaterialKeywords.Contains(keyword))
                    {
                        var kw = keyword.TryResolve(state.LinkCache);
                        if (kw is null || kw.EditorID is null) continue;

                        material = kw.EditorID.Replace("WeapMaterial", "").Replace("DLC2WeaponMaterial", "");
                    }
                    else if (weaponTypeKeywords.Contains(keyword))
                    {
                        var kw = keyword.TryResolve(state.LinkCache);
                        if (kw is null || kw.EditorID is null) continue;

                        type = kw.EditorID.Replace("WeapType", "").Replace("VendorItem", "");
                    }
                }

                if (material == "" || type == "")
                {
                    //System.Console.WriteLine("> keywords not found: " + material + "/" + type);
                    continue;
                }

                //System.Console.WriteLine("> keywords found ");
                
                // Form the keys for the dictionaries
                string key = material + "_" + type;
                var tuple = new Tuple<ModKey, string>(weaponGetter.FormKey.ModKey, key.ToLower());

                // Create a new leveled item entry
                LeveledItemEntry entry = new()
                {
                    Data = new()
                    {
                        Count = 1,
                        Level = 1,
                        Reference = new FormLink<IWeaponGetter>(weaponGetter.FormKey)
                    }
                };

                // Add the new entry in the mod-dependent dictionary
                leveledItemsToAddPerMod.TryGetValue(tuple, out var entryList);
                if (entryList is null)
                {
                    // new lvlentry
                    leveledItemsToAddPerMod.Add(tuple, new HashSet<LeveledItemEntry>() { entry });
                }
                else
                {
                    if (!entryList.Contains(entry))
                        entryList.Add(entry);
                }

                // Add the entry also to the mod-independent dictionary
                leveledItemsToAdd.TryGetValue(key, out var hash);
                if(hash is null)
                {
                    leveledItemsToAdd.TryAdd(key, new HashSet<LeveledItemEntry>() { entry });
                }
                else
                {
                    hash.Add(entry);
                }

                count1++;
            }
            System.Console.WriteLine("Done with Weapons!");


            if (Settings.DoArmours)
            {
                System.Console.WriteLine("Retrieving armors...");
                // Iterate on all weapons
                foreach (var armourGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IArmorGetter>())
                {
                    // Ignore no keywords
                    if (armourGetter.Keywords is null) continue;

                    // Ignore daedric artifacts
                    if (armourGetter.HasKeyword(Skyrim.Keyword.VendorItemDaedricArtifact)) continue;

                    // Ignore enchanted
                    if (!armourGetter.ObjectEffect.IsNull) continue;

                    // Ignore clothing
                    if (armourGetter.HasKeyword(Skyrim.Keyword.VendorItemClothing)) continue;

                    string material = "";
                    string type = "";

                    // Search all keywords
                    foreach (var keyword in armourGetter.Keywords)
                    {
                        if (armorMaterialKeywords.Contains(keyword))
                        {
                            var kw = keyword.TryResolve(state.LinkCache);
                            if (kw is null || kw.EditorID is null) continue;

                            material = kw.EditorID.Replace("ArmorMaterial", "").Replace("DLC2ArmorMaterial", "").Replace("DLC1ArmorMaterial", "");
                        }
                        else if (armorTypeKeywords.Contains(keyword))
                        {
                            var kw = keyword.TryResolve(state.LinkCache);
                            if (kw is null || kw.EditorID is null) continue;

                            type = kw.EditorID.Replace("Armor", "").Replace("VendorItem", "");
                        }
                    }

                    if (material == "" || type == "")
                    {
                        //System.Console.WriteLine("> keywords not found: " + material + "/" + type);
                        continue;
                    }

                    //System.Console.WriteLine("> keywords found ");

                    // Form the keys for the dictionaries
                    string key = material + "_" + type;
                    var tuple = new Tuple<ModKey, string>(armourGetter.FormKey.ModKey, key.ToLower());

                    // Create a new leveled item entry
                    LeveledItemEntry entry = new()
                    {
                        Data = new()
                        {
                            Count = 1,
                            Level = 1,
                            Reference = new FormLink<IWeaponGetter>(armourGetter.FormKey)
                        }
                    };

                    // Add the new entry in the mod-dependent dictionary
                    leveledItemsToAddPerMod.TryGetValue(tuple, out var entryList);
                    if (entryList is null)
                    {
                        // new lvlentry
                        leveledItemsToAddPerMod.Add(tuple, new HashSet<LeveledItemEntry>() { entry });
                    }
                    else
                    {
                        if (!entryList.Contains(entry))
                            entryList.Add(entry);
                    }

                    // Add the entry also to the mod-independent dictionary
                    leveledItemsToAdd.TryGetValue(key, out var hash);
                    if (hash is null)
                    {
                        leveledItemsToAdd.TryAdd(key, new HashSet<LeveledItemEntry>() { entry });
                    }
                    else
                    {
                        hash.Add(entry);
                    }

                    count2++;
                }
                System.Console.WriteLine("Done with Armors!");
            }
            

            // Iterate on the mod-dependent dictionary, to create new leveled lists for the bigger ones
            System.Console.WriteLine("Creating new leveled lists...");
            foreach (var lvlentry in leveledItemsToAddPerMod)
            {
                if (lvlentry.Value.Count > Settings.MinAmountLeveledList)
                {
                    // Create a whole new leveled list
                    var lv = state.PatchMod.LeveledItems.AddNew();
                    
                    // Check if it is a weapon or armour
                    var t1 = lvlentry.Value.First().Data?.Reference.TryResolve<IWeaponGetter>(state.LinkCache);
                    var t2 = lvlentry.Value.First().Data?.Reference.TryResolve<IArmorGetter>(state.LinkCache);
                    if(t1 is null && t2 is null) continue;

                    string recordType = "Armor_";
                    if(t1 is not null)
                    {
                        recordType = "Weapon_";
                    }           

                    // Set the new leveled list values
                    lv.EditorID = "OWL_" + recordType + lvlentry.Key.Item2 + "_" + lvlentry.Key.Item1.Name.ToLower();
                    lv.ChanceNone = 0;
                    lv.Flags.SetFlag(LeveledItem.Flag.CalculateForEachItemInCount, true);
                    lv.Flags.SetFlag(LeveledItem.Flag.CalculateFromAllLevelsLessThanOrEqualPlayer, true);
                    lv.Entries = new();
                    lv.Entries.AddRange(lvlentry.Value);

                    // Create a new leveled list entry with that newly created leveled list
                    LeveledItemEntry entry = new()
                    {
                        Data = new()
                        {
                            Count = 1,
                            Level = 1,
                            Reference = new FormLink<IWeaponGetter>(lv.FormKey)
                        }
                    };

                    // Remove all single entries from the mod-independent list
                    leveledItemsToAdd.TryGetValue(lvlentry.Key.Item2, out var hash);
                    if (hash is null) continue;
                    foreach(var value in lvlentry.Value)
                    {
                        hash.Remove(value);
                    }

                    // Add the newly created leveled list to the the mod-independent list
                    if (hash is null)
                    {
                        leveledItemsToAdd.TryAdd(lvlentry.Key.Item2, new HashSet<LeveledItemEntry>() { entry });
                    }
                    else
                    {
                        hash.Add(entry);
                    }

                    count3++;
                }
            }
            System.Console.WriteLine("Created" + count3 + " new leveled lists!");


            // Iterate on OWL leveled lists
            System.Console.WriteLine("Starting to fill the OWL leveled lists...");
            foreach (var lvlListGetter in state.LoadOrder.PriorityOrder.Where(x => x.ModKey.Equals(OWL)).WinningOverrides<ILeveledItemGetter>())
            {
                if (lvlListGetter.EditorID is null) continue;

                if (lvlListGetter.EditorID.StartsWith("OWL_"))
                {
                    var split = lvlListGetter.EditorID.Split('_');
                    string material = "";
                    string type = "";

                    var count = split.Length;

                    // CHECK FOR UNUSED LAST SPLIT

                    // Check that the size of split 
                    if (split.Length != 4) continue;

                    // Form the key
                    material = split[2];
                    type = split[3];
                    string key = material + "_" + type;

                    // Get the items to add to the list
                    leveledItemsToAdd.TryGetValue(key, out var hash);
                    if (hash is null) continue;

                    // Get the leveled list
                    var modifiedList = state.PatchMod.LeveledItems.GetOrAddAsOverride(lvlListGetter);

                    // Add all items to the leveled lists, if not already present
                    foreach(var hashEntry in hash)
                    {
                        if (modifiedList.Entries is not null && modifiedList.Entries.Contains(hashEntry))
                        {
                            if(Settings.Debug)
                                System.Console.WriteLine("Leveled list entry already exists, skipping!");
                        }
                        else
                        {
                            modifiedList.Entries?.Add(hashEntry);
                        }
                    }
                    
                }
            }
            System.Console.WriteLine("Done filling OWL leveled lists!");
            System.Console.WriteLine(count1 + " weapons and " + count2 + " armours were distributed into OWL's leveled lists.");


            System.Console.WriteLine("All done!");
        }
    }
}
